buildscript {
    ext {
        testngVersion = '7.11.0'
        restAssuredVersion = '5.5.1'
        restAssuredJsonPathVersion = '5.5.1'
        jacksonVersion = '2.18.3'
        hamcrestVersion = '3.0'
        apacheCommonVersion = '3.17.0'
        simpleJsonVersion = '1.1.1'
        allureTestngVersion = '2.29.1'
        allureJavaCommonsVersion = '2.29.1'
        lombokVersion = '1.18.38'
        apacheLog4j2Version = '2.24.3'
        allureTestFilterversion = '2.29.1'
        dependencyCheckVersion = '12.1.0'
    }
    repositories {
        mavenCentral()
    }
    dependencies {
        classpath "org.owasp:dependency-check-gradle:${dependencyCheckVersion}"
    }
}

plugins {
    id 'java'
    id 'org.owasp.dependencycheck' version '12.1.0'
}

repositories {
    mavenCentral()
}

group = 'app.sonic'
version = '1.0-SNAPSHOT'

dependencies {
    testImplementation "org.testng:testng:${testngVersion}"
    testImplementation "io.rest-assured:rest-assured:${restAssuredVersion}"
    testImplementation "io.rest-assured:json-path:${restAssuredJsonPathVersion}"
    implementation "com.fasterxml.jackson.core:jackson-databind:${jacksonVersion}"
    testImplementation "org.hamcrest:hamcrest:${hamcrestVersion}"
    implementation "org.apache.commons:commons-lang3:${apacheCommonVersion}"
    implementation "com.googlecode.json-simple:json-simple:${simpleJsonVersion}"
    implementation "io.qameta.allure:allure-testng:${allureTestngVersion}"
    implementation "io.qameta.allure:allure-java-commons:${allureJavaCommonsVersion}"
    implementation "org.projectlombok:lombok:${lombokVersion}"
    compileOnly "org.projectlombok:lombok:${lombokVersion}"
    annotationProcessor "org.projectlombok:lombok:${lombokVersion}"
    runtimeOnly "org.apache.logging.log4j:log4j-slf4j2-impl:${apacheLog4j2Version}"
    runtimeOnly "org.apache.logging.log4j:log4j-core:${apacheLog4j2Version}"
    runtimeOnly "io.qameta.allure:allure-test-filter:${allureTestFilterversion}"
}

dependencyCheck {
    failBuildOnCVSS = 5
}

Properties semver = new Properties()
semver.load(new FileInputStream(file("semver.properties") as File))

Properties properties = new Properties()
if(file("sonic.properties").exists()) {
    file("sonic.properties").withInputStream {properties.load(it)}
} else {
    println("sonic properties file does not exist")
}

test {
    useTestNG()
}